/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto2";
option java_package = "org.apache.hadoop.hetu.photon.proto";
option java_outer_classname = "HetuPhotonProtos";
option java_generic_services = true;
option java_generate_equals_and_hash = true;
package hadoop.hetu;

import "OmClientProtocol.proto";

/**
 * RowResult represents one row from a scanner, in row-wise layout.
 */
message PartialRowProto {
  required hadoop.ozone.SchemaProto schema = 1;

  // Variable length data. If string, will be UTF-8 encoded. Elements of this list _must_ have a
  // mark that we can reset() to. Readers of these fields (encoders, etc) must call reset() before
  // attempting to read these values.
  repeated bytes varLengthData = 2;
  required bytes rowAlloc = 3;
  required bytes columnsBitSet = 4;
  optional bytes nullsBitSet = 5;
}

enum OperationTypeProto {
  INSERT = 1;
  UPDATE = 2;
  DELETE = 3;
  UPSERT = 4;
  SCAN_QUERY = 5;
}

message OperationRequestProto {
  required OperationTypeProto operationType = 1; // Type of the command

  optional InsertOperationRequestProto insertOperation = 4;
  optional UpdateOperationRequestProto updateOperation = 5;
  optional DeleteOperationRequestProto deleteOperation = 6;
  optional UpsertOperationRequestProto upsertOperation = 7;
  optional ScanQueryOperationRequestProto scanQueryOperation = 8;
}

message OperationResponseProto {
  required OperationTypeProto operationType = 1; // Type of the command
  optional string message = 2;

  optional InsertOperationResponseProto insertOperation = 4;
  optional UpdateOperationResponseProto updateOperation = 5;
  optional DeleteOperationResponseProto deleteOperation = 6;
  optional UpsertOperationResponseProto upsertOperation = 7;
  optional ScanQueryOperationResponseProto scanQueryOperation = 8;
}

message InsertOperationRequestProto {
  /**
  * This size will be set when serialize is called. It stands for the size of the row in this
  * operation.
  */
  required uint64 rowSizeBytes = 1;
  required PartialRowProto row = 2;
}

message InsertOperationResponseProto {
}

message UpdateOperationRequestProto {
  optional string conditionalExpression = 1;
}

message UpdateOperationResponseProto {
}

message DeleteOperationRequestProto {
  required string conditionalExpression = 1;
}

message DeleteOperationResponseProto {
}

message UpsertOperationRequestProto {
  optional string conditionalExpression = 1;
}

message UpsertOperationResponseProto {
}

message ScanQueryOperationRequestProto {
  required string conditionalExpression = 1;
}

message ScanQueryOperationResponseProto {
  /**
  * This size will be set when serialize is called. It stands for the size of the row in this
  * operation.
  */
  required uint64 rowSizeBytes = 1;
  repeated PartialRowProto row = 2;
}